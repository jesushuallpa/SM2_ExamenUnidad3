# Nombre del flujo de trabajo que se mostrar√° en la pesta√±a "Actions" de GitHub.
name: Dart CI

# Configuraci√≥n de cu√°ndo se debe ejecutar este flujo de trabajo.
on:
  # Se ejecuta cuando se hace un 'push' a la rama 'main'.
  push:
    branches: [ main ]
  # Tambi√©n se ejecuta cuando se crea un 'pull request' dirigido a la rama 'main'.
  pull_request:
    branches: [ main ]

# Define los trabajos (jobs) que se ejecutar√°n como parte de este flujo de trabajo.
jobs:
  # Se define un √∫nico trabajo llamado 'build'. Puedes nombrarlo como prefieras (p. ej., 'test', 'analyze').
  build:
    # El tipo de m√°quina virtual en la que se ejecutar√° el trabajo.
    # 'ubuntu-latest' es una opci√≥n com√∫n y recomendada.
    runs-on: ubuntu-latest

    # La secuencia de pasos que componen el trabajo.
    steps:
      # Paso 1: Descarga el c√≥digo de tu repositorio.
      # Usa la acci√≥n 'actions/checkout@v3' para acceder a tu c√≥digo fuente.
      - name: ‚¨áÔ∏è Descargar c√≥digo fuente
        uses: actions/checkout@v3

      # Paso 2: Configura el entorno de Flutter.
      # Usa la acci√≥n 'subosito/flutter-action@v2' para instalar el SDK de Flutter.
      # Puedes especificar una versi√≥n concreta de Flutter si lo necesitas.
      - name: üê¶ Configurar Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0' # Reemplaza con tu versi√≥n de Flutter deseada.
          channel: 'stable' # Puedes usar 'stable', 'beta', o 'dev'.

      # Paso 3: Instala las dependencias del proyecto.
      # Ejecuta el comando 'flutter pub get' para descargar todos los paquetes
      # definidos en tu archivo pubspec.yaml.
      - name: üì¶ Instalar dependencias
        run: flutter pub get

      # Paso 4: Genera archivos de c√≥digo (p. ej., para mocks).
      # Este paso es CRUCIAL si usas paquetes como mockito, freezed, etc.
      # Ejecuta build_runner para generar los archivos necesarios antes de analizar y probar.
      - name: ‚öôÔ∏è Generar archivos de c√≥digo
        run: flutter pub run build_runner build --delete-conflicting-outputs

      # Paso 5: Analiza el c√≥digo fuente.
      # Ejecuta 'flutter analyze' para verificar si hay errores o advertencias en el c√≥digo
      # seg√∫n las reglas de lint configuradas en 'analysis_options.yaml'.
      - name: üî¨ Analizar el c√≥digo
        run: flutter analyze

      # Paso 6: Ejecuta las pruebas unitarias y de widgets.
      # Ejecuta 'flutter test' para correr todas las pruebas que se encuentren
      # en el directorio 'test/'. El flag '--coverage' genera un reporte de cobertura.
      - name: ‚úÖ Ejecutar pruebas
        run: flutter test --coverage

      # (Opcional) Paso 7: Sube el reporte de cobertura de pruebas.
      # Usa la acci√≥n 'actions/upload-artifact' para guardar los resultados de la cobertura
      # como un "artefacto" del flujo de trabajo, que podr√°s descargar despu√©s.
      - name: üì§ Subir reporte de cobertura
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
